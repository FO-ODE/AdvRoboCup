// Generated by gencpp from file minimind_chat_ros/ChatIntent.msg
// DO NOT EDIT!


#ifndef MINIMIND_CHAT_ROS_MESSAGE_CHATINTENT_H
#define MINIMIND_CHAT_ROS_MESSAGE_CHATINTENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace minimind_chat_ros
{
template <class ContainerAllocator>
struct ChatIntent_
{
  typedef ChatIntent_<ContainerAllocator> Type;

  ChatIntent_()
    : action()
    , object()
    , location()  {
    }
  ChatIntent_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , object(_alloc)
    , location(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_type;
  _object_type object;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _location_type;
  _location_type location;





  typedef boost::shared_ptr< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> const> ConstPtr;

}; // struct ChatIntent_

typedef ::minimind_chat_ros::ChatIntent_<std::allocator<void> > ChatIntent;

typedef boost::shared_ptr< ::minimind_chat_ros::ChatIntent > ChatIntentPtr;
typedef boost::shared_ptr< ::minimind_chat_ros::ChatIntent const> ChatIntentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::minimind_chat_ros::ChatIntent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::minimind_chat_ros::ChatIntent_<ContainerAllocator1> & lhs, const ::minimind_chat_ros::ChatIntent_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.object == rhs.object &&
    lhs.location == rhs.location;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::minimind_chat_ros::ChatIntent_<ContainerAllocator1> & lhs, const ::minimind_chat_ros::ChatIntent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace minimind_chat_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e91181b6db0a5bb7757ce24c086304f3";
  }

  static const char* value(const ::minimind_chat_ros::ChatIntent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe91181b6db0a5bb7ULL;
  static const uint64_t static_value2 = 0x757ce24c086304f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "minimind_chat_ros/ChatIntent";
  }

  static const char* value(const ::minimind_chat_ros::ChatIntent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n"
"string object\n"
"string location\n"
;
  }

  static const char* value(const ::minimind_chat_ros::ChatIntent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.object);
      stream.next(m.location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChatIntent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::minimind_chat_ros::ChatIntent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::minimind_chat_ros::ChatIntent_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
    s << indent << "object: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object);
    s << indent << "location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.location);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINIMIND_CHAT_ROS_MESSAGE_CHATINTENT_H
